buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.8.0'
    }
}
plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'signing'
}
apply plugin: "com.vanniktech.maven.publish"

group = 'com.devappliance'
version = '0.1'
sourceCompatibility = '8'
repositories {
    mavenLocal()
    maven {
        url = 'https://repo.maven.apache.org/maven2'
    }
    mavenCentral()
}
configurations {
    provided
}

jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}
sourceSets {
    main { compileClasspath += configurations.provided }
}
def ninjaVersion='6.5.0';
def swaggerVersion='2.1.4'
def swaggerUiVersion='3.32.5'
dependencies {
    compile "io.swagger.core.v3:swagger-annotations:${swaggerVersion}"
    compile "io.swagger.core.v3:swagger-models:${swaggerVersion}"
    compile "io.swagger.core.v3:swagger-integration:${swaggerVersion}"
    compile "org.webjars:swagger-ui:${swaggerUiVersion}"
    compile 'org.springframework:spring-core:5.2.7.RELEASE'
    testImplementation "org.ninjaframework:ninja-test-utilities:${ninjaVersion}"
    testImplementation 'io.rest-assured:rest-assured:4.3.1'
    // https://mvnrepository.com/artifact/org.skyscreamer/jsonassert
    testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
    provided "org.ninjaframework:ninja-servlet:${ninjaVersion}"
    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
// https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-properties
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-properties', version: '2.11.1'
}



task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

//signing {
//    useGpgCmd()
//    sign configurations.archives
//}

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            customizePom(pom)
//            groupId 'com.devappliance.ninjadoc'
//            artifactId 'ninjadoc-openapi'
//            version '0.0.1'
//
//            from components.java
//
//            // create the sign pom artifact
//            pom.withXml {
//                def pomFile = file("${project.buildDir}/generated-pom.xml")
//                writeTo(pomFile)
//                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
//                artifact(pomAscFile) {
//                    classifier = null
//                    extension = 'pom.asc'
//                }
//                def moduleFile= file("${project.buildDir}/publications/mavenJava/module.json")
//                def signedModuleFile=signing.sign(moduleFile).signatureFiles[0]
//                artifact(signedModuleFile) {
//                    classifier = null
//                    extension = 'module.asc'
//                }
//            }
//
//            artifact(sourceJar) {
//                classifier = 'sources'
//            }
//            artifact(javadocJar) {
//                classifier = 'javadoc'
//            }
//
//            // create the signed artifacts
//            project.tasks.signArchives.signatureFiles.each {
//                artifact(it) {
//                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
//                    if (matcher.find()) {
//                        classifier = matcher.group(1)
//                    } else {
//                        classifier = null
//                    }
//                    extension = 'jar.asc'
//                }
//            }
//        }
//    }
//    repositories {
//        maven {
//            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
//            credentials {
//                username "${project.findProperty('sonatypeUsername')}"
//                password "${project.findProperty('sonatypePassword')}"
//            }
//        }
//    }
//}

//def customizePom(pom) {
//    pom.withXml {
//        def root = asNode()
//
//        // eliminate test-scoped dependencies (no need in maven central POMs)
//        root.dependencies.removeAll { dep ->
//            dep.scope == "test"
//        }
//
//        // add all items necessary for maven central publication
//        root.children().last() + {
//            resolveStrategy = Closure.DELEGATE_FIRST
//
//            description 'Library for OpenAPI 3 with ninja framework'
//            name 'Ninjadoc Openapi'
//            url 'https://github.com/gibahjoe/ninjadoc-openapi'
//            organization {
//                name 'Devappliance'
//                url 'https://github.com/gibahjoe'
//            }
//            issueManagement {
//                system 'GitHub'
//                url 'https://github.com/gibahjoe/ninjadoc-openapi/issues'
//            }
//            licenses {
//                license {
//                    name 'Apache License 2.0'
//                    url 'https://github.com/gibahjoe/ninjadoc-openapi/blob/master/LICENSE'
//                    distribution 'repo'
//                }
//            }
//            scm {
//                url 'https://github.com/gibahjoe/ninjadoc-openapi'
//                connection 'scm:git:git@github.com:gibahjoe/ninjadoc-openapi.git'
//                developerConnection 'scm:git:ssh://git@github.com:gibahjoe/ninjadoc-openapi.git'
//            }
//            developers {
//                developer {
//                    name 'Gibah Joe'
//                }
//            }
//        }
//    }
//}
//
//model {
//    tasks.generatePomFileForMavenJavaPublication {
//        destination = file("$buildDir/generated-pom.xml")
//    }
//    tasks.publishMavenJavaPublicationToMavenLocal {
//        dependsOn project.tasks.signArchives
//    }
//    tasks.publishMavenJavaPublicationToMavenRepository {
//        dependsOn project.tasks.signArchives
//    }
//}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                minimum = 0.4
                maximum = 0.6
            }
            excludes = [

            ]
        }
    }
}
check.dependsOn jacocoTestCoverageVerification
